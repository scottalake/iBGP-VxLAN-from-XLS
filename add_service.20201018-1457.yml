---
- name: Configure overlay service
  hosts: [leaf,bleaf]
  connection: local
  gather_facts: no
  roles:
    - common

  vars:
    playbook_name: "Configure overlay service"
    file: "{{ file }}"
  tasks:
    # - name: Include service variables
    #   include_vars: 
    #   file: "{{ file }}"
    #   #/root/ansible/fabric1/service_test.yml
    # - shell: uuidgen
    #   with_sequence: count=1
    #   register: uuid_list
    # - debug: var=uuid_list
    # - set_fact:
    #     checkpoint_file_name: "{{uuid_list['results'][0]['stdout_lines'][0]}}.cfg"
    # - name: Display checkpoint file name
    #   debug:
    #     msg:
    #       - "Use the checkpoint file {{ checkpoint_file_name }} to rollback to the configuration before service."
    # - name: Create checkpoint
    #   nxos_rollback:
    #     checkpoint_file: "{{checkpoint_file_name}}"
    #   tags:
    #     - create_checkpoint

# #########################################################################
# file: "./service_tenant_vrfa_l1l2.yml"
# #########################################################################
# services:
#   - { vlanid: 100, service: l2l3vni, mtu: 9216, vrfname: VRFA, l3vnivlan: 10, gwipaddress: "192.168.123.254/24" }
# l2service:
#   interfaces:
#     - { name: Eth2/1, bndlid: 1 }
#     - { name: Eth2/2, bndlid: 1 }
#     - { name: port-channel1, vpc: 1, mtu: 9216, mode: trunk, vlanid: 100, native: 1 }
# vpc_pl: port-channel4096
# bgp_address_families:
#   - { vrf: VRFA, afi: ipv4, safi: unicast }
# #########################################################################

    - block:
#########################################################################

        - name: Configure L2VNI VLAN and map it to L2VNI
          nxos_vlan:
            vlan_id: "{{ item.vlanid }}"
            mapped_vni: "3000{{ item.vlanid }}"
            admin_state: up
          with_items: "{{ services }}"

# #########################################################################
# vlan 1,100
# vlan 100
#   vn-segment 3000100

# #########################################################################
# file: "./service_tenant_vrfa_l1l2.yml"
# #########################################################################
# services:
#   - { vlanid: 100, service: l2l3vni, mtu: 9216, vrfname: VRFA, l3vnivlan: 10, gwipaddress: "192.168.123.254/24" }
# l2service:
#   interfaces:
#     - { name: Eth1/2, bndlid: 2 }
#     - { name: port-channel2, vpc: 2, mtu: 9216, mode: trunk, vlanid: 100, native: 1 }
# vpc_pl: port-channel4096
# bgp_address_families:
#   - { vrf: VRFA, afi: ipv4, safi: unicast }
# #########################################################################

        - name: Configure L3VNI VLAN and map it to L3VNI
          nxos_vlan:
            vlan_id: "{{ item.l3vnivlan }}"
            mapped_vni: "300{{ item.l3vnivlan }}"
            admin_state: up
          when: item.service == "l2l3vni" 
          with_items: "{{ services }}"

# #########################################################################
# vlan 1,10,100
# vlan 10
#   vn-segment 30010
# #########################################################################

# #########################################################################
# ##  Deprecated Module 
# #########################################################################
        # - name: Make sure the cited interfaces are L2 
        #   nxos_interface:
        #     interface: "{{ item.name }}"
        #     mode: layer2
        #     admin_state: up
        #   with_items: "{{ l2service['interfaces'] }}"
# #########################################################################

        - name: Make sure the cited interfaces are L2 
          nxos_interfaces:
            config:
              - name: "{{ item.name }}"
                mode: layer2
                enabled: True
            state: merged
          with_items: "{{ l2service['interfaces'] }}"

        - name: validate vpc interfaces member of port channel
          nxos_command:
            commands: 
            - show run interface {{ item.name }}
          register: show_run_interface
          #when: item.bndlid is defined
          with_items: "{{ l2service['interfaces'] }}"

        - name: print show run interface to console
          debug: "{{ item.stdout_lines }}"
          with_items: "{{show_run_interface.results}}"
          #when: item.stdout_lines is defined


# #########################################################################
# ##  Deprecated Module 
# #########################################################################

#         - name: Configure interfaces (Access)
#           nxos_l2_interface:
#             aggregate:
#               - { name: "{{ item.name }}", access_vlan: "{{ item.vlanid }}" }
#             mode: access
#           when: 
#             - item.mode is defined and item.mode == "access"
#             - item.bndlid is not defined
#           with_items: "{{ l2service['interfaces'] }}"

        - name: Configure interfaces (Access)
          nxos_l2_interfaces:
            config:
              - name: "{{ item.name }}"
                access:
                  vlan: "{{ item.vlanid }}"
            state: merged
          when: 
            - item.mode is defined and item.mode == "access"
            - item.bndlid is not defined
          with_items: "{{ l2service['interfaces'] }}"

# #########################################################################
# ##  Deprecated Module 
# #########################################################################

#         - name: Configure interfaces (Trunk) Not in bundle
#           nxos_l2_interface:
#             name: "{{ item.name }}"
#             trunk_add_vlans: "{{ item.vlanid }}"
#             native_vlan: "{{ item.native }}"
#             mode: trunk
#           when: 
#             - item.mode is defined and item.mode == "trunk"
#             - item.bndlid is not defined
#           with_items: "{{ l2service['interfaces'] }}"

# #########################################################################
# ##  This module is not working in Ansible 2.9 so a manual workaround
# ##  is included below the next stanza to manually make the interface
# ##  a trunk.
# ##  The filtering ensures that port channel members are not configured 
# ##  with unnecessay trunk mode commands.
# #########################################################################
        - name: Configure trunk interfaces not in port-channel group
          nxos_l2_interfaces:
            config:
              - name: "{{ item.name }}"
                trunk:
                  allowed_vlans: "{{ item.vlanid }}"
            state: merged
          when: 
            - item.mode is defined and item.mode == "trunk"
            - item.bndlid is not defined
          with_items: "{{ l2service['interfaces'] }}"

# #########################################################################
# ##  Workaround for Ansible 2.9 trunk mode bug.
# #########################################################################
        - name: Manually configure port channel in trunk mode due to Ansible bug
          nxos_config:
            lines:
              - switchport mode trunk
            parents: "interface {{ item.name }}"
          when: 
            - item.mode is defined and item.mode == "trunk"
            - item.bndlid is not defined
          with_items: "{{ l2service['interfaces'] }}"



# #########################################################################
# ##  Deprecated Module 
# #########################################################################

#         - name: Configure interfaces MTU
#           nxos_interface:
#             interface: "{{ item.name }}"
#             mtu: "{{ item.mtu }}"
#             provider: "{{ nxapi }}" 
#           when:
#             - item.bndlid is not defined
#           with_items: "{{ l2service['interfaces'] }}"

        - name: Make sure the cited interfaces are L2 
          nxos_interfaces:
            config:
              - name: "{{ item.name }}"
                mtu: "{{ item.mtu }}"
            state: merged
          when:
            - item.bndlid is not defined
          with_items: "{{ l2service['interfaces'] }}"


# #########################################################################

#         - name: Configure PO if needed
#           nxos_linkagg:
#             group: "{{ item.bndlid }}"
#             mode: active
#             members:
#               - "{{ item.name }}"
#             force: yes
#           when: item.bndlid is defined
#           with_items: "{{ l2service['interfaces'] }}"

        # - name: Add vpc portchannel interface with nxos_lag_interfaces module
        #   nxos_lag_interfaces:
        #     config: "{{ vpc['vpc_lag_interfaces'] }}" 
        #     state: merged
        #   when: vpc.domain is defined

############################################################################

        - name: Replace device configuration of specified LAG attributes of given interfaces with provided configuration.
          nxos_lag_interfaces:
            config:
              - name: "{{ item.bndlid }}"
                members:
                  - member: "{{ item.name }}"
            state: replaced
          when: item.bndlid is defined
          with_items: "{{ l2service['interfaces'] }}"

############################################################################
############################################################################
############################################################################

        - name: validate vpc interfaces member of port channel
          nxos_command:
            commands: 
            - show run interface {{ item.name }} | i  channel-group
          register: channel_group
          when: item.bndlid is defined
          with_items: "{{ l2service['interfaces'] }}"

        - name: debug var channel_group.results
          debug: var=channel_group.results

        - name: debug var channel_group
          debug: "{{ item.stdout_lines }}"
          with_items: "{{channel_group.results}}"
          when: item.stdout_lines is defined

        # - set_fact: raw_prefix='mpath'
        #   when: item.stdout|regex_search('mpath')
        #   with_items: "{{w.results}}"
        #   until: raw_prefix=='mpath'

        #- debug: var=channel_group.results[0]['changed']
        #- debug: var=channel_group.results[0]['stdout'[0]]
        #- debug: var=channel_group.results[0]['stdout_lines'][0]
        #- debug: var=channel_group.results[0]['stdout'][0]
        #- debug: var=channel_group.stderr

        # - debug:
        #     msg: "{{ item.stdout[0] }}"
        #   loop: "{{ channel_group.results }}"

        # - debug:
        #     msg: "{{ item.[stdout] }}"
        #   loop: "{{ channel_group.results }}"

        # - debug:
        #     msg: "{{ item[stdout] }}"
        #   loop: "{{ channel_group.results }}"

        - name: debug item.stdout
          debug:
            msg: "{{ item.stdout }}"
          loop: "{{ channel_group.results }}"
          when: item.stdout is defined

        - name: debug item.stdout with subelements
          debug:
            msg: "Contents of stdout for {{ inventory_hostname }}, {{ item.0.item.name }} is {{ item.1 }}"
          with_subelements:
            - "{{ channel_group.results }}"
            - stdout
          when: item.1 is defined

        - assert:
            that:
              - item.1 | regex_search('.*active.*')
              #- item.stdout_lines[0] | length > 0
              #- item.stdout | length > 0
          with_subelements:
            - "{{ channel_group.results }}"
            - stdout
          when: item.1 is defined

        # - name: Check if log directory exists - Step 2
        #   fail: msg="Log directory does not exists or it is not a symlink."
        #   failed_when: >
        #     item.stat.islnk is not defined
        #     or item.stat.islnk != true
        #     or item..stat.lnk_source != "{{ wl_base }}/logs/{{ wl_dom }}/{{ item.1 }}"
        #   with_items: channel_group.results

        # - assert:
        #     that:
        #       #- item.stdout | regex_search(.*active.*)
        #       - item.stdout_lines[0] | length > 0
        #       #- item.stdout | length > 0
        #   with_items: "{{ channel_group.results }}"
        #   when: item.stdout is defined

        # - assert:
        #     that:
        #       - item.stdout | regex_search(.*active.*)
        #       #- item.stdout_lines[0] | length > 0
        #       #- item.stdout | length > 0
        #   with_subelements:
        #     - "{{ channel_group.results }}"
        #     - stdout
        #   when: channel_group.results.stdout is defined



# - debug:
#     msg: "JBoss config {{ item.item }} does not contain the word vault"
#   when: item.stdout.find('$VAULT') == -1
#   with_items: '{{ vault_contents.results }}'

# - name: Install telegraf agent/collector (RedHat)
#   yum:
#     name: "{{ agent_collector }}"
#     state: "installed"
#   when: ( ansible_os_family == 'RedHat' and company_install_collector == true )
#   register: result
#   until: result.stdout.find("Installed:") != -1
#   #The following works in CentOS/RedHat
#   #until: result.rc == 0  



  # - name: Assert that namespaces have the correct Kiali roles
  #   assert:
  #     that: "{{ item.resources | length == 1 }}"
  #   with_items:
  #   - "{{ kiali_roles.results }}"


        # - block:
        #   - name: validate vpc interfaces member of port channel
        #     nxos_command:
        #       commands: 
        #       - show run interface {{ item.name }}
        #     register: results
        #     when: item.bndlid is defined
        #     with_items: "{{ l2service['interfaces'] }}"

        #   - debug: var=results

        #   - assert:
        #       that:
        #         - "'active' in checksum1.stdout[0]"

        #   - name: validate vpc interfaces member of port channel
        #     nxos_command:
        #       commands: 
        #       - show run interface {{ vpc['vpc_interfaces'][1]['name'] }} 
        #     register: checksum2
        #   - debug: var=checksum2
        #   - assert:
        #       that:
        #         - "'active' in checksum2.stdout[0]"
        #   rescue:
        #   - name: send default interface command to vpc lag members
        #     nxos_config:
        #       lines:
        #         - default interface {{ item.1.member }} 
        #     with_subelements:
        #       - "{{ vpc.vpc_lag_interfaces }}"
        #       - members
        #   - name: delete port channel interface
        #     nxos_config:
        #       lines:
        #       - no interface port-channel {{ vpc.po_id }}
        #   - name: Add vpc portchannel interface with nxos_lag_interfaces module
        #     nxos_lag_interfaces:
        #       config: "{{ vpc['vpc_lag_interfaces'] }}" 
        #       state: merged
        #   - name: Enable vpc port channel interface with nxos_interfaces module
        #     nxos_interfaces:
        #       config:
        #         - name: "port-channel{{ vpc.po_id }}"
        #           description: 'vPC_peer_link_to_{{ vpc.vpc_peer }}'
        #           mode: layer2
        #           enabled: True
        #       state: merged
        #   - name: Configure trunking on portchannel interface with nxos_l2_interfaces module
        #     nxos_l2_interfaces:
        #       config:
        #         - name: "port-channel{{ vpc.po_id }}"
        #           trunk:
        #             allowed_vlans: 1-200
        #       state: merged
        #   - name: Configure peer link on VPC Port Channel interface with nxos_vpc_interface module
        #     nxos_vpc_interface:
        #       portchannel: "{{ vpc.po_id }}"
        #       peer_link: yes
        #       state: present
        #   - name: validate port channel configuration present on FIRST port channel member interface
        #     nxos_command:
        #       commands: 
        #       - show run interface {{ vpc['vpc_interfaces'][0]['name'] }} 
        #     register: checksum1
        #   - assert:
        #       that:
        #         - " 'active' in checksum1.stdout[0]"
        #       fail_msg: "port channel still has a problem sticking to vpc member interfaces"
        #       success_msg: "port channel configuration on {{ vpc['vpc_interfaces'][0]['name'] }}"
        #   - name: validate port channel configuration present on SECOND port channel member interface
        #     nxos_command:
        #       commands: 
        #       - show run interface {{ vpc['vpc_interfaces'][1]['name'] }} 
        #     register: checksum2
        #   - assert:
        #       that:
        #         - " 'active' in checksum2.stdout[0]"
        #       fail_msg: "port channel still has a problem sticking to vpc member interfaces"
        #       success_msg: "port channel configuration on {{ vpc['vpc_interfaces'][0]['name'] }}"
















# #########################################################################

#         - name: Configure PO with vPC if needed
#           nxos_vpc_interface:
#             portchannel: "{{ item.name | regex_search('[0-9]+')}}"
#             vpc: "{{ item.vpc }}"
#             provider: "{{ nxapi }}"  
#           when: 
#             - item.vpc is defined
#           with_items: "{{ l2service['interfaces'] }}"
#           register: vpc_exists

# #########################################################################

#         - name: Add VLANs to vPC peer-link interface
#           nxos_l2_interface:
#             name: "{{ vpc_pl }}"
#             trunk_add_vlans: "{{ item.vlanid }}"
#             mode: trunk
#           when: 
#             - item.service == "l2vni"
#             - vpc_exists is defined and vpc_exists.changed
#             - vpc_pl is defined
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Add L2VNI to overlay NVE1
#           nxos_vxlan_vtep_vni:
#             interface: nve1
#             vni: "3000{{ item.vlanid }}"
#             multicast_group: "232.1.0.{{ 255 % item.vlanid | round | int if (item.vlanid > 255) else item.vlanid }}"
#             suppress_arp: true
#           with_items: "{{ services }}"  

# #########################################################################

#         - name: EVPN configuration
#           nxos_evpn_vni:
#             vni: "3000{{ item.vlanid }}"
#             route_distinguisher: auto
#             route_target_both: auto
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Obtain the router BGP local AS
#           nxos_command:
#             commands:
#               - show bgp process
#           register: output_bgpprocess
#           ignore_errors: yes
#         - set_fact:
#             bgp_localas: "{{ output_bgpprocess['stdout_lines'][0]['protocoltag'] }}"
#             ignore_errors: yes

# #########################################################################

#         - name: Create VRFs
#           nxos_vrf:
#             vrf: "{{ item.vrfname }}"
#             vni: "300{{ item.l3vnivlan }}"
#             rd: auto
#             state: present
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Create tenant SVI 
#           nxos_interface:
#             name: "vlan{{ item.vlanid }}"
#             mtu: "{{ item.mtu }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Assign tenant SVI to VRF
#           nxos_vrf_interface:
#             vrf: "{{ item.vrfname }}"
#             interface: "vlan{{ item.vlanid }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Create tenant SVI 
#           nxos_interface:
#             name: "vlan{{ item.vlanid }}"
#             fabric_forwarding_anycast_gateway: true
#             mtu: "{{ item.mtu }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Assign IP addresses to tenant SVI
#           nxos_ip_interface:
#             interface: "vlan{{ item.vlanid }}"
#             addr: "{{ item.gwipaddress.split('/')[0] }}"
#             mask: "{{ item.gwipaddress.split('/')[1] }}"
#             tag: "{{ bgp_localas }}"
#           when:
#             - item.service == "l2l3vni"
#           with_items: "{{ services }}" 

# #########################################################################

#         #- name: Assign IP addresses to tenant SVI
#         #  nxos_l3_interface:
#         #    name: "vlan{{ item.vlanid }}"
#         #    ipv4: "{{ item.gwipaddress }}"
#         #    provider: "{{ nxapi }}"
#         #  when: item.service == "l2l3vni"
#         #  with_items: "{{ services }}"
#         - set_fact:
#             ipl0underlay: "{{ underlay['loopbacks'][0]['ipaddress'] }}/{{ underlay['loopbacks'][0]['mask'] }}"
#         - name: Admin up test Loopback in VRF
#           nxos_interface:
#             name: "Loopback{{ item.l3vnivlan }}"
#             admin_state: up
#           when:
#             - item.service == "l2l3vni"
#             - ipl0underlay is defined
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Assign test Loopback to VRF
#           nxos_vrf_interface:
#             vrf: "{{ item.vrfname }}"
#             interface: "Loopback{{ item.l3vnivlan }}"
#           when: 
#             - item.service == "l2l3vni"
#             - ipl0underlay is defined
#           with_items: "{{ services }}"
#         - name: Assign IP addresses to test Loopback
#           nxos_ip_interface:
#             interface: "Loopback{{ item.l3vnivlan }}"
#             addr: "{{ ipl0underlay.split('/')[0] }}"
#             mask: "{{ ipl0underlay.split('/')[1] }}"
#             tag: "{{ bgp_localas }}"
#           when:
#             - item.service == "l2l3vni"
#             - ipl0underlay is defined
#           with_items: "{{ services }}"

# #########################################################################

#         #- name: Assign IP addresses to test Loopback
#         #  nxos_l3_interface:
#         #    name: "Loopback{{ item.l3vnivlan }}"
#         #    ipv4: "{{ ipl0underlay }}"
#         #    provider: "{{ nxapi }}"
#         #  when: 
#         #    - item.service == "l2l3vni"
#         #    - ipl0underlay is defined
#         #  with_items: "{{ services }}"

# #########################################################################

#         - name: Announce tenant l2vpn evpn into BGP
#           nxos_bgp_af:
#             asn: "{{ bgp_localas }}"
#             vrf: "{{ item.vrf }}"
#             afi: "{{ item.afi }}"
#             safi: "{{ item.safi }}"
#             advertise_l2vpn_evpn: "true"
#             redistribute: [['direct', 'RMAP-REDIST-DIRECT']]
#           with_items: "{{ bgp_address_families }}"
#           when: bgp_localas is defined

# #########################################################################

#         - name: Bring up L3VNI SVIF
#           nxos_interface:
#             interface: "vlan{{ item.l3vnivlan }}"
#             admin_state: up
#           when:
#             - item.service == "l2l3vni"
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Assign L3VNI SVI to VRF
#           nxos_vrf_interface:
#             vrf: "{{ item.vrfname }}"
#             interface: "vlan{{ item.l3vnivlan }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Create L3VNI SVI 
#           nxos_interface:
#             name: "vlan{{ item.l3vnivlan }}"
#             ip_forward: enable
#             mtu: "{{ item.mtu }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}"  

# #########################################################################

#         - name: Associate L3VNI SVI to Overlay
#           nxos_vxlan_vtep_vni:
#             interface: nve1
#             vni: "300{{ item.l3vnivlan }}"
#             assoc_vrf: true
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}"

# #########################################################################

#       rescue:
#         - set_fact:
#             trigger_msg: True
#             send_msg: "{{ playbook_name }} -  error configure on {{ inventory_hostname }}"
#           changed_when: True
#           notify: notify using spark
#         - name: Rollback to checkpoint
#           nxos_rollback:
#             rollback_to: "{{checkpoint_file_name}}"
