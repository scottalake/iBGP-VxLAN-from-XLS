---
- name: Configure overlay service
  hosts: [leaf,bleaf]
  connection: local
  gather_facts: no
  roles:
    - common

  vars:
    playbook_name: "Configure overlay service"
    file: "{{ file }}"
  tasks:
    # - name: Include service variables
    #   include_vars:
    #     file: "{{ file }}"
    #     #/root/ansible/fabric1/service_test.yml
    # - shell: uuidgen
    #   with_sequence: count=1
    #   register: uuid_list
    # - set_fact:
    #     checkpoint_file_name: "{{uuid_list['results'][0]['stdout_lines'][0]}}.cfg"
    # - name: Display checkpoint file name
    #   debug:
    #     msg:
    #       - "Use the checkpoint file {{ checkpoint_file_name }} to rollback to the configuration before service."
    # - name: Create checkpoint
    #   nxos_rollback:
    #     checkpoint_file: "{{checkpoint_file_name}}"
    #   tags:
    #     - create_checkpoint

    - block:

#########################################################################

        - name: Configure L2VNI VLAN and map it to L2VNI
          nxos_vlan:
            vlan_id: "{{ item.vlanid }}"
            mapped_vni: "3000{{ item.vlanid }}"
            admin_state: up
          with_items: "{{ services }}"

# #########################################################################

#         - name: Configure L3VNI VLAN and map it to L3VNI
#           nxos_vlan:
#             vlan_id: "{{ item.l3vnivlan }}"
#             mapped_vni: "300{{ item.l3vnivlan }}"
#             admin_state: up
#           when: item.service == "l2l3vni" 
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Make sure the cited interfaces are L2 
#           nxos_interface:
#             interface: "{{ item.name }}"
#             mode: layer2
#             admin_state: up
#           with_items: "{{ l2service['interfaces'] }}"

# #########################################################################

#         - name: Configure interfaces (Access)
#           nxos_l2_interface:
#             aggregate:
#               - { name: "{{ item.name }}", access_vlan: "{{ item.vlanid }}" }
#             mode: access
#           when: 
#             - item.mode is defined and item.mode == "access"
#             - item.bndlid is not defined
#           with_items: "{{ l2service['interfaces'] }}"

# #########################################################################

#         - name: Configure interfaces (Trunk)
#           nxos_l2_interface:
#             name: "{{ item.name }}"
#             trunk_add_vlans: "{{ item.vlanid }}"
#             native_vlan: "{{ item.native }}"
#             mode: trunk
#           when: 
#             - item.mode is defined and item.mode == "trunk"
#             - item.bndlid is not defined
#           with_items: "{{ l2service['interfaces'] }}"

# #########################################################################

#         - name: Configure interfaces MTU
#           nxos_interface:
#             interface: "{{ item.name }}"
#             mtu: "{{ item.mtu }}"
#             provider: "{{ nxapi }}" 
#           when:
#             - item.bndlid is not defined
#           with_items: "{{ l2service['interfaces'] }}"

# #########################################################################

#         - name: Configure PO if needed
#           nxos_linkagg:
#             group: "{{ item.bndlid }}"
#             mode: active
#             members:
#               - "{{ item.name }}"
#             force: yes
#           when: item.bndlid is defined
#           with_items: "{{ l2service['interfaces'] }}"

# #########################################################################

#         - name: Configure PO with vPC if needed
#           nxos_vpc_interface:
#             portchannel: "{{ item.name | regex_search('[0-9]+')}}"
#             vpc: "{{ item.vpc }}"
#             provider: "{{ nxapi }}"  
#           when: 
#             - item.vpc is defined
#           with_items: "{{ l2service['interfaces'] }}"
#           register: vpc_exists

# #########################################################################

#         - name: Add VLANs to vPC peer-link interface
#           nxos_l2_interface:
#             name: "{{ vpc_pl }}"
#             trunk_add_vlans: "{{ item.vlanid }}"
#             mode: trunk
#           when: 
#             - item.service == "l2vni"
#             - vpc_exists is defined and vpc_exists.changed
#             - vpc_pl is defined
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Add L2VNI to overlay NVE1
#           nxos_vxlan_vtep_vni:
#             interface: nve1
#             vni: "3000{{ item.vlanid }}"
#             multicast_group: "232.1.0.{{ 255 % item.vlanid | round | int if (item.vlanid > 255) else item.vlanid }}"
#             suppress_arp: true
#           with_items: "{{ services }}"  

# #########################################################################

#         - name: EVPN configuration
#           nxos_evpn_vni:
#             vni: "3000{{ item.vlanid }}"
#             route_distinguisher: auto
#             route_target_both: auto
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Obtain the router BGP local AS
#           nxos_command:
#             commands:
#               - show bgp process
#           register: output_bgpprocess
#           ignore_errors: yes
#         - set_fact:
#             bgp_localas: "{{ output_bgpprocess['stdout_lines'][0]['protocoltag'] }}"
#             ignore_errors: yes

# #########################################################################

#         - name: Create VRFs
#           nxos_vrf:
#             vrf: "{{ item.vrfname }}"
#             vni: "300{{ item.l3vnivlan }}"
#             rd: auto
#             state: present
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Create tenant SVI 
#           nxos_interface:
#             name: "vlan{{ item.vlanid }}"
#             mtu: "{{ item.mtu }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Assign tenant SVI to VRF
#           nxos_vrf_interface:
#             vrf: "{{ item.vrfname }}"
#             interface: "vlan{{ item.vlanid }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Create tenant SVI 
#           nxos_interface:
#             name: "vlan{{ item.vlanid }}"
#             fabric_forwarding_anycast_gateway: true
#             mtu: "{{ item.mtu }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Assign IP addresses to tenant SVI
#           nxos_ip_interface:
#             interface: "vlan{{ item.vlanid }}"
#             addr: "{{ item.gwipaddress.split('/')[0] }}"
#             mask: "{{ item.gwipaddress.split('/')[1] }}"
#             tag: "{{ bgp_localas }}"
#           when:
#             - item.service == "l2l3vni"
#           with_items: "{{ services }}" 

# #########################################################################

#         #- name: Assign IP addresses to tenant SVI
#         #  nxos_l3_interface:
#         #    name: "vlan{{ item.vlanid }}"
#         #    ipv4: "{{ item.gwipaddress }}"
#         #    provider: "{{ nxapi }}"
#         #  when: item.service == "l2l3vni"
#         #  with_items: "{{ services }}"
#         - set_fact:
#             ipl0underlay: "{{ underlay['loopbacks'][0]['ipaddress'] }}/{{ underlay['loopbacks'][0]['mask'] }}"
#         - name: Admin up test Loopback in VRF
#           nxos_interface:
#             name: "Loopback{{ item.l3vnivlan }}"
#             admin_state: up
#           when:
#             - item.service == "l2l3vni"
#             - ipl0underlay is defined
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Assign test Loopback to VRF
#           nxos_vrf_interface:
#             vrf: "{{ item.vrfname }}"
#             interface: "Loopback{{ item.l3vnivlan }}"
#           when: 
#             - item.service == "l2l3vni"
#             - ipl0underlay is defined
#           with_items: "{{ services }}"
#         - name: Assign IP addresses to test Loopback
#           nxos_ip_interface:
#             interface: "Loopback{{ item.l3vnivlan }}"
#             addr: "{{ ipl0underlay.split('/')[0] }}"
#             mask: "{{ ipl0underlay.split('/')[1] }}"
#             tag: "{{ bgp_localas }}"
#           when:
#             - item.service == "l2l3vni"
#             - ipl0underlay is defined
#           with_items: "{{ services }}"

# #########################################################################

#         #- name: Assign IP addresses to test Loopback
#         #  nxos_l3_interface:
#         #    name: "Loopback{{ item.l3vnivlan }}"
#         #    ipv4: "{{ ipl0underlay }}"
#         #    provider: "{{ nxapi }}"
#         #  when: 
#         #    - item.service == "l2l3vni"
#         #    - ipl0underlay is defined
#         #  with_items: "{{ services }}"

# #########################################################################

#         - name: Announce tenant l2vpn evpn into BGP
#           nxos_bgp_af:
#             asn: "{{ bgp_localas }}"
#             vrf: "{{ item.vrf }}"
#             afi: "{{ item.afi }}"
#             safi: "{{ item.safi }}"
#             advertise_l2vpn_evpn: "true"
#             redistribute: [['direct', 'RMAP-REDIST-DIRECT']]
#           with_items: "{{ bgp_address_families }}"
#           when: bgp_localas is defined

# #########################################################################

#         - name: Bring up L3VNI SVIF
#           nxos_interface:
#             interface: "vlan{{ item.l3vnivlan }}"
#             admin_state: up
#           when:
#             - item.service == "l2l3vni"
#           with_items: "{{ services }}"

# #########################################################################

#         - name: Assign L3VNI SVI to VRF
#           nxos_vrf_interface:
#             vrf: "{{ item.vrfname }}"
#             interface: "vlan{{ item.l3vnivlan }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}" 

# #########################################################################

#         - name: Create L3VNI SVI 
#           nxos_interface:
#             name: "vlan{{ item.l3vnivlan }}"
#             ip_forward: enable
#             mtu: "{{ item.mtu }}"
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}"  

# #########################################################################

#         - name: Associate L3VNI SVI to Overlay
#           nxos_vxlan_vtep_vni:
#             interface: nve1
#             vni: "300{{ item.l3vnivlan }}"
#             assoc_vrf: true
#           when: item.service == "l2l3vni"  
#           with_items: "{{ services }}"

# #########################################################################

#       rescue:
#         - set_fact:
#             trigger_msg: True
#             send_msg: "{{ playbook_name }} -  error configure on {{ inventory_hostname }}"
#           changed_when: True
#           notify: notify using spark
#         - name: Rollback to checkpoint
#           nxos_rollback:
#             rollback_to: "{{checkpoint_file_name}}"
